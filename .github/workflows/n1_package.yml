#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: N1_package

on:
  repository_dispatch:
  workflow_dispatch:
    # inputs:
      # ssh:
      #   description: 'SSH connection to Actions'
      #   required: false
      #   default: 'false'
  # schedule:
    # - cron: 10 16 * * *

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: N1_medium.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  OPENWRT_TAG: armsr
  ROOTFS_RELEASE: true
  ROOTFS_TAG: ROOTFS_24.04

jobs:
  # Build:
  #   runs-on: ubuntu-22.04

  Package:
    # needs: [Build]
    runs-on: ubuntu-24.04

    env:
      COMMIT_AUTHOR: ${{ needs.Build.outputs.COMMIT_AUTHOR }}
      COMMIT_DATE: ${{ needs.Build.outputs.COMMIT_DATE }}
      COMMIT_MESSAGE: ${{ needs.Build.outputs.COMMIT_MESSAGE }}
      COMMIT_HASH: ${{ needs.Build.outputs.COMMIT_HASH }}
      DEVICE_TARGET: ${{ needs.Build.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ needs.Build.outputs.DEVICE_SUBTARGET }}

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
        g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
        libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libpython3-dev libreadline-dev \
        libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lld llvm lrzsz mkisofs msmtp \
        nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply \
        python3-docutils python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig \
        texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd texlive-full lldb  clangd 
        sudo -E apt-get -qq install libfuse-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        Emoji=("🎉" "🤞" "✨" "🎁" "🎈" "🎄" "🎨" "💋" "🍓" "🍕" "🍉" "💐" "🌴" "🚀" "🛸" "🗽" "⛅" "🌈" "🔥" "⛄" "🐶" "🏅" "🦄" "🐤")
        echo "EMOJI=${Emoji[$[$RANDOM % ${#Emoji[@]}]]}" >> $GITHUB_ENV

    - name: Download Armvirt Firmware
      id: download
      run: |
        FIRMWARE_PATH=openwrt/bin/targets/armvirt/64
        [ -d $FIRMWARE_PATH ] || mkdir -p $FIRMWARE_PATH
        cd $FIRMWARE_PATH
        wget -q $(curl -s "https://api.github.com/repos/$GITHUB_REPOSITORY/releases" | grep "$ROOTFS_TAG.*rootfs.tar.gz" | awk -F '"' '{print $4}')
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date +"%y.%m.%d")" >> $GITHUB_ENV
    
    - name: Package immortalwrt Firmware
      if: steps.download.outputs.status == 'success'
      uses: unifreq/openwrt_packit@master
      # uses: ophub/flippy-openwrt-actions@main
      env:
        OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/immortalwrt-armsr-armv8-generic-rootfs.tar.gz
        KERNEL_REPO_URL: breakings/OpenWrt
        KERNEL_VERSION_NAME: 5.15.164_6.1.104
        KERNEL_AUTO_LATEST: true
        PACKAGE_SOC: s905d
        SCRIPT_S905D: mk_s905d_n1.sh
        WHOAMI: huoleifeng
        DISTRIB_REVISION: R${{ env.DATE1 }} by HuoLeifeng
        
    # - name: Upload OpenWrt To Artifact
    #   if: env.PACKAGED_STATUS == 'success' && env.OPENWRT_RELEASE != 'true'
    #   uses: kittaakos/upload-artifact-as-is@master
    #   with:
    #     path: ${{ env.PACKAGED_OUTPUTPATH }}
    
    - name: Upload OpenWrt Firmware to Release
      if: env.PACKAGED_STATUS == 'success' && env.OPENWRT_RELEASE == 'true'
      uses: ncipollo/release-action@v1.14.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: ${{ env.DATE }} for ${{ env.OPENWRT_TAG }} from_N1_haiibo ${{ env.EMOJI }}
        allowUpdates: true
        removeArtifacts: true
        tag: ${{ env.OPENWRT_TAG }}
        # token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
        body: |
          This is OpenWrt firmware for N1
          ### 📒 Firmware information
          - 🚀 ARMv8 多功能版，集成插件多
          - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🌐 Default IP: 192.168.2.3
          - 🔑 Default username: root
          - 🔑 Default password: password
          ### 🍻 安装与更新
          - 用插件安装: 系统 → 晶晨宝盒 → 安装 OpenWrt → 选择型号 → 安装
          - 用命令安装: U盘启动成功后输入命令 `openwrt-install-amlogic` 按照英文提示写入到 emmc
          - 用插件更新: 系统 → 晶晨宝盒 → 在线下载更新 → 完整更新全系统
          - 用命令更新: 上传固件到 `/mnt/mmcblk2p4` 目录，输入命令 `openwrt-update-amlogic` 即可更新
          - 注意: 如非 `amlogic` 平台，请将其更改为对应平台 `rockchip` `allwinner`
          - 部分常见问题及注意事项请参考恩山论坛F大➦[最新帖](https://www.right.com.cn/forum/thread-4076037-1-1.html)
          ### 🧊 固件版本
          - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
          - ${{ env.COMMIT_AUTHOR }}
          - ${{ env.COMMIT_DATE }}
          - ${{ env.COMMIT_MESSAGE }}
          - ${{ env.COMMIT_HASH }}

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2.0.6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 7
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.3
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
